# Remove version line to fix warning
networks:
  ipfs-private:
    driver: bridge

services:
  # Gateway IPFS Node + Backend
  gateway:
    build:
      context: ./backend
      dockerfile: Dockerfile
    platform: linux/arm64
    ports:
      - "3000:3000"   # Backend API
      - "5001:5001"   # IPFS API
      - "8080:8080"   # IPFS Gateway
    volumes:
      - ./swarm.key:/data/ipfs/swarm.key:ro
      - gateway_data:/data/ipfs
      - ./backend/data:/app/data  # For SQLite database
    environment:
      - NODE_ENV=development
      - DATABASE_URL=file:/app/data/database.db
      - IPFS_PATH=/data/ipfs
      - IPFS_SWARM_KEY_FILE=/data/ipfs/swarm.key
      - LIBP2P_FORCE_PNET=1
    networks:
      - ipfs-private
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # IPFS Storage Node 1 - Internal only, no external ports
  ipfs-node-1:
    image: ipfs/go-ipfs:v0.24.0
    platform: linux/arm64
    # Remove external port mapping - only internal communication
    expose:
      - "4001"
    volumes:
      - ./swarm.key:/swarm.key:ro
      - node1_data:/data/ipfs
    networks:
      - ipfs-private
    environment:
      - LIBP2P_FORCE_PNET=1
    entrypoint: |
      sh -c '
        # Ensure swarm key is in place before init
        mkdir -p /data/ipfs
        cp /swarm.key /data/ipfs/swarm.key
        if [ ! -f /data/ipfs/config ]; then
          ipfs init
          # Configure for private network storage node
          ipfs config Routing.Type dht
          ipfs config --json Discovery.MDNS.Enabled true
          ipfs config --json Discovery.webRTCStar.Enabled false
          ipfs config bootstrap rm --all
          # Configure to listen on all interfaces within container network
          ipfs config Addresses.Swarm "[\"/ip4/0.0.0.0/tcp/4001\"]"
          ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin "[\"*\"]"
        fi
        exec ipfs daemon --migrate=true
      '

  # IPFS Storage Node 2 - Internal only, no external ports
  ipfs-node-2:
    image: ipfs/go-ipfs:v0.24.0
    platform: linux/arm64
    # Remove external port mapping - only internal communication
    expose:
      - "4001"
    volumes:
      - ./swarm.key:/swarm.key:ro
      - node2_data:/data/ipfs
    networks:
      - ipfs-private
    environment:
      - LIBP2P_FORCE_PNET=1
    entrypoint: |
      sh -c '
        # Ensure swarm key is in place before init
        mkdir -p /data/ipfs
        cp /swarm.key /data/ipfs/swarm.key
        if [ ! -f /data/ipfs/config ]; then
          ipfs init
          # Configure for private network storage node
          ipfs config Routing.Type dht
          ipfs config --json Discovery.MDNS.Enabled true
          ipfs config --json Discovery.webRTCStar.Enabled false
          ipfs bootstrap rm --all
          # Configure to listen on all interfaces within container network
          ipfs config Addresses.Swarm "[\"/ip4/0.0.0.0/tcp/4001\"]"
          ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin "[\"*\"]"
        fi
        exec ipfs daemon --migrate=true
      '

  # IPFS Storage Node 3 - Internal only, no external ports
  ipfs-node-3:
    image: ipfs/go-ipfs:v0.24.0
    platform: linux/arm64
    # Remove external port mapping - only internal communication
    expose:
      - "4001"
    volumes:
      - ./swarm.key:/swarm.key:ro
      - node3_data:/data/ipfs
    networks:
      - ipfs-private
    environment:
      - LIBP2P_FORCE_PNET=1
    entrypoint: |
      sh -c '
        # Ensure swarm key is in place before init
        mkdir -p /data/ipfs
        cp /swarm.key /data/ipfs/swarm.key
        if [ ! -f /data/ipfs/config ]; then
          ipfs init
          # Configure for private network storage node
          ipfs config Routing.Type dht
          ipfs config --json Discovery.MDNS.Enabled true
          ipfs config --json Discovery.webRTCStar.Enabled false
          ipfs bootstrap rm --all
          # Configure to listen on all interfaces within container network
          ipfs config Addresses.Swarm "[\"/ip4/0.0.0.0/tcp/4001\"]"
          ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin "[\"*\"]"
        fi
        exec ipfs daemon --migrate=true
      '

volumes:
  gateway_data:
  node1_data:
  node2_data:
  node3_data: